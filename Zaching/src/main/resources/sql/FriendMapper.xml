<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="FriendMapper">

	<resultMap type="friend" id="friendSelectMap">
		<result property="id" column="id" jdbcType="INTEGER" />
		<result property="friendId" column="friend_id" jdbcType="INTEGER" />
		<result property="userId" column="user_id" jdbcType="INTEGER" />
		<result property="createdDate" column="created_date" jdbcType="DATE"/>
		<result property="profileImage" column="profile_image"
			jdbcType="VARCHAR" />
		<result property="name" column="name" jdbcType="VARCHAR" />
		<!-- <result property="name" column="name" jdbcType="VARCHAR" /> <result 
			property="profileImage" column="profile_image" jdbcType="VARCHAR"/> -->
		<result property="status" column="status" jdbcType="CHAR" />

		<!-- 한쪽만 follow 0 / 친구 신청 1 / 친구 차단 2 &&&& 친구상태 서로 0 -->


	</resultMap>

	<insert id="addFriend" parameterType="map">
		INSERT
		INTO FRIEND (id, user_id, friend_id, status, created_date )
		VALUES( seq_id.nextval,
		#{friend.userId:INTEGER},
		#{friend.friendId:INTEGER},
		#{status:CHAR},
		SYSDATE
		)

	</insert>

	<insert id="enterFriend" parameterType="map">
		INSERT
		INTO friend(
		id, user_id , friend_id , status )
		VALUES(
		seq_id.nextval,
		#{friendId:INTEGER},
		#{userId:INTEGER},
		'0'
		)
	</insert>


	<select id="getFriend" parameterType="int" resultMap="friendSelectMap">
		SELECT
		friend.friend_id,
		friend.status,
		users.name,
		users.profile_image
		FROM
		friend,users
		<where>
			friend.user_id=users.user_id
			AND friend.status=1
		</where>
	</select>

	<update id="updateFriend" parameterType="friend">
		UPDATE friend
		<set>
			status=#{status}
		</set>
		<where>
			user_id=#{userId}
			AND friend_id=#{friendId}
			AND status=#{status}
		</where>
	</update>

	<delete id="deleteFriend" parameterType="friend">
		DELETE
		FROM friend WHERE
		friend_id=#{friendId}
	</delete>

	<select id="listFriend" parameterType="search" resultMap="friendSelectMap">
		SELECT *
		FROM ( SELECT inner_table.*, ROWNUM AS row_seq FROM (
		<include refid="listFriendSql" />
		) inner_table
		WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum}
	</select>

	<select id="getTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*)
		FROM(
		<include refid="listFriendSql" />
		) countTable
	</select>

	<sql id="listFriendSql">
		SELECT f.*, u.profile_image, u.name
		FROM friend f, (select friend_id from friend where user_id=#{searchKeyword} and status=0) v, users u
		<where>
			f.user_id=v.friend_id(+) 
			AND u.user_id=f.user_id
			AND status='0' 
			AND f.friend_id=#{searchKeyword}
		</where>
		ORDER BY u.name
	</sql>
		
	<select id="checkFriend" parameterType="map" resultType="int">
		SELECT count(*)
		FROM friend
		WHERE user_id=#{userId} AND friend_id=#{friendId} AND status=#{status}
	</select>
	
	<delete id="cancelFriend" parameterType="map">
		DELETE
		FROM friend
		WHERE user_id=#{userId} AND friend_id=#{friendId} AND status=#{status}
	</delete>
	
	<update id="updateStatus" parameterType="map">
		UPDATE friend
		SET status=#{status}
		WHERE user_id=#{userId} AND friend_id=#{friendId}
	</update>
	
	<select id="checkFollow" parameterType="map" resultType="int">
		SELECT count(*)
		FROM friend
		WHERE user_id=#{userId} AND friend_id=#{friendId} AND status=#{status}
	</select>
	
	<select id="recommendFriend" parameterType="int" resultMap="friendSelectMap">
		SELECT * 
		FROM (SELECT
		u.*
		FROM users u, (SELECT * FROM (SELECT DISTINCT f.friend_id FROM (select friend_id from friend where user_id=#{value} and status=0) v, friend f where v.friend_id=f.user_id(+)
		and status=0 and  f.friend_id not in(#{value}) and f.friend_id not in(SELECT friend_id FROM friend WHERE user_id=#{value}) ) 
		) p
		where u.user_id = p.friend_id
		order by DBMS_RANDOM.RANDOM)
		WHERE rownum<![CDATA[<]]>6
	</select>
	
	<select id="addBobFriend" parameterType="map" resultMap="friendSelectMap">
		SELECT * 
		FROM friend f, users u 
		WHERE friend_id NOT IN(SELECT user_id FROM participant WHERE bob_id=#{bobId}) AND f.friend_id=u.user_id AND f.user_id=#{userId};
	</select>

</mapper>